{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PHP Chess PHP Chess is a library implemented in PHP that allows to create chess apps out-of-the-box. One key feature is that it has been designed with OOP principles in mind and is thoroughly tested with plenty of unit tests. The unit tests are the best documentation. They contain hundreds of real examples on how to use the PHP Chess library. Almost every class in the src folder represents a concept that is tested accordingly in the tests/unit folder, in other words, the structure of the tests/unit folder is mirroring the structure of the src folder. For further details on how to use a particular class, please feel free to browse the codebase and check out the corresponding tests. The PHP Chess docs are more of a tutorial rather than an API description. Common Formats Supported Chess moves in LAN and PGN formats. Movetext processing in LAN, SAN and RAV formats. NAG support for SAN and RAV movetexts. UCI protocol. FEN conversion to chess board. Chess board conversion to PNG and JPG image. Chess board conversion to MP4 video. Acronym Description LAN Long Algebraic Notation PGN Portable Game Notation SAN Standard Algebraic Notation RAV Recursive Annotation Variation NAG Numeric Annotation Glyphs UCI Universal Chess Interface FEN Forsyth-Edwards Notation Chess Variants Multiple variants are supported with the default one being classical chess. Variant Chessboard Capablanca Chess\\Variant\\Capablanca\\Board Capablanca-Fischer Chess\\Variant\\CapablancaFischer\\Board Chess960 Chess\\Variant\\Chess960\\Board Classical Chess\\Variant\\Classical\\Board UCI Engines Listed below are the UCI engines available at the moment. Name UCI Engine Stockfish Chess\\UciEngine\\Stockfish Object-Oriented The chess board representation is an object of type SplObjectStorage as opposed to a bitboard. Thoroughly Tested PHP Chess has been developed with a test-driven development (TDD) approach. The tests/unit folder contains plenty of real examples. Lightweight PHP dependencies required: Rubix ML for machine learning. Imagine for image processing.","title":"Home"},{"location":"#php-chess","text":"PHP Chess is a library implemented in PHP that allows to create chess apps out-of-the-box. One key feature is that it has been designed with OOP principles in mind and is thoroughly tested with plenty of unit tests. The unit tests are the best documentation. They contain hundreds of real examples on how to use the PHP Chess library. Almost every class in the src folder represents a concept that is tested accordingly in the tests/unit folder, in other words, the structure of the tests/unit folder is mirroring the structure of the src folder. For further details on how to use a particular class, please feel free to browse the codebase and check out the corresponding tests. The PHP Chess docs are more of a tutorial rather than an API description.","title":"PHP Chess"},{"location":"#common-formats-supported","text":"Chess moves in LAN and PGN formats. Movetext processing in LAN, SAN and RAV formats. NAG support for SAN and RAV movetexts. UCI protocol. FEN conversion to chess board. Chess board conversion to PNG and JPG image. Chess board conversion to MP4 video. Acronym Description LAN Long Algebraic Notation PGN Portable Game Notation SAN Standard Algebraic Notation RAV Recursive Annotation Variation NAG Numeric Annotation Glyphs UCI Universal Chess Interface FEN Forsyth-Edwards Notation","title":"Common Formats Supported"},{"location":"#chess-variants","text":"Multiple variants are supported with the default one being classical chess. Variant Chessboard Capablanca Chess\\Variant\\Capablanca\\Board Capablanca-Fischer Chess\\Variant\\CapablancaFischer\\Board Chess960 Chess\\Variant\\Chess960\\Board Classical Chess\\Variant\\Classical\\Board","title":"Chess Variants"},{"location":"#uci-engines","text":"Listed below are the UCI engines available at the moment. Name UCI Engine Stockfish Chess\\UciEngine\\Stockfish","title":"UCI Engines"},{"location":"#object-oriented","text":"The chess board representation is an object of type SplObjectStorage as opposed to a bitboard.","title":"Object-Oriented"},{"location":"#thoroughly-tested","text":"PHP Chess has been developed with a test-driven development (TDD) approach. The tests/unit folder contains plenty of real examples.","title":"Thoroughly Tested"},{"location":"#lightweight","text":"PHP dependencies required: Rubix ML for machine learning. Imagine for image processing.","title":"Lightweight"},{"location":"chess-tutor/","text":"Chess Tutor Explain FEN \u2728 Chess beginners often think they can checkmate the opponent's king quickly. However, there are so many different things to consider in order to understand a position. Chess\\Tutor\\FenExplanation helps you improve your chess thinking process by explaining a FEN position in terms of chess concepts . use Chess\\FenToBoard; use Chess\\Tutor\\FenExplanation; $board = FenToBoard::create('8/5k2/4n3/8/8/1BK5/1B6/8 w - - 0 1'); $paragraph = (new FenExplanation($board))->getParagraph(); $text = implode(' ', $paragraph); echo $text; White has a significant material advantage. White has a significant control of the center. The white pieces are somewhat better connected. The white player is pressuring a little bit more squares than its opponent. The knight on e6 is pinned so it can't be moved because the king would be put in check. White has the bishop pair. The resulting text may sound a little robotic but it can be easily rephrased by the AI of your choice to make it sound more human-like. Also a quick numerical estimate of the position can be obtained by passing the $isEvaluated parameter to the constructor. use Chess\\FenToBoard; use Chess\\Tutor\\FenExplanation; $board = FenToBoard::create('rnb1kbnr/ppppqppp/8/4p3/4PP2/6P1/PPPP3P/RNBQKBNR w KQkq -'); $paragraph = (new FenExplanation($board, $isEvaluated = true))->getParagraph(); $text = implode(' ', $paragraph); echo $text; Black has a somewhat better control of the center. The black pieces are significantly better connected. White has a kind of space advantage. Overall, 1 heuristic evaluation feature is favoring White while 2 are favoring Black. A heuristic evaluation is a quick numerical estimate of a chess position that suggests who may be better without considering checkmate. Please note that a heuristic evaluation is not the same thing as a chess calculation. Heuristic evaluations are often correct but may fail as long as they are based on probabilities more than anything else. \ud83c\udf89 This is a form of abductive reasoning. Explain PGN \u2728 Typically, chess engines won't provide an explanation in easy-to-understand language about why a move is good. Chess\\Tutor\\PgnExplanation can explain the implications of making a particular move in terms of chess concepts and combined with an UCI engine it will explain the why of a good move. Stockfish has been set up with a skill level of 20 and a depth of 15 to suggest a good move. In order to use this functionality, make sure to install Stockfish >= 15.1 as it is described in Play Computer . use Chess\\Play\\SanPlay; use Chess\\Tutor\\PgnExplanation; $movetext = '1.Nf3 d5 2.g3 c5'; $board = (new SanPlay($movetext))->validate()->getBoard(); $paragraph = (new PgnExplanation('d4', $board->toFen()))->getParagraph(); $text = implode(' ', $paragraph); echo $text; Black has a kind of space advantage. The pawn on c5 is unprotected. The resulting text may sound a little robotic but it can be easily rephrased by the AI of your choice to make it sound more human-like. Also a quick numerical estimate of the position can be obtained by passing the $isEvaluated parameter to the constructor. use Chess\\Tutor\\PgnExplanation; $paragraph = (new PgnExplanation('Bxe6+', '8/5k2/4n3/8/8/1BK5/1B6/8 w - - 0 1', $isEvaluated = true)) ->getParagraph(); $text = implode(' ', $paragraph); echo $text; White has a decisive material advantage. White is just controlling the center. White has a total space advantage. The white pieces are timidly approaching the other side's king. The bishop on e6 is unprotected. Overall, 6 heuristic evaluation features are favoring White while 1 is favoring Black. \ud83c\udf89 Let's do this!","title":"Chess Tutor"},{"location":"chess-tutor/#chess-tutor","text":"","title":"Chess Tutor"},{"location":"chess-tutor/#explain-fen","text":"\u2728 Chess beginners often think they can checkmate the opponent's king quickly. However, there are so many different things to consider in order to understand a position. Chess\\Tutor\\FenExplanation helps you improve your chess thinking process by explaining a FEN position in terms of chess concepts . use Chess\\FenToBoard; use Chess\\Tutor\\FenExplanation; $board = FenToBoard::create('8/5k2/4n3/8/8/1BK5/1B6/8 w - - 0 1'); $paragraph = (new FenExplanation($board))->getParagraph(); $text = implode(' ', $paragraph); echo $text; White has a significant material advantage. White has a significant control of the center. The white pieces are somewhat better connected. The white player is pressuring a little bit more squares than its opponent. The knight on e6 is pinned so it can't be moved because the king would be put in check. White has the bishop pair. The resulting text may sound a little robotic but it can be easily rephrased by the AI of your choice to make it sound more human-like. Also a quick numerical estimate of the position can be obtained by passing the $isEvaluated parameter to the constructor. use Chess\\FenToBoard; use Chess\\Tutor\\FenExplanation; $board = FenToBoard::create('rnb1kbnr/ppppqppp/8/4p3/4PP2/6P1/PPPP3P/RNBQKBNR w KQkq -'); $paragraph = (new FenExplanation($board, $isEvaluated = true))->getParagraph(); $text = implode(' ', $paragraph); echo $text; Black has a somewhat better control of the center. The black pieces are significantly better connected. White has a kind of space advantage. Overall, 1 heuristic evaluation feature is favoring White while 2 are favoring Black. A heuristic evaluation is a quick numerical estimate of a chess position that suggests who may be better without considering checkmate. Please note that a heuristic evaluation is not the same thing as a chess calculation. Heuristic evaluations are often correct but may fail as long as they are based on probabilities more than anything else. \ud83c\udf89 This is a form of abductive reasoning.","title":"Explain FEN"},{"location":"chess-tutor/#explain-pgn","text":"\u2728 Typically, chess engines won't provide an explanation in easy-to-understand language about why a move is good. Chess\\Tutor\\PgnExplanation can explain the implications of making a particular move in terms of chess concepts and combined with an UCI engine it will explain the why of a good move. Stockfish has been set up with a skill level of 20 and a depth of 15 to suggest a good move. In order to use this functionality, make sure to install Stockfish >= 15.1 as it is described in Play Computer . use Chess\\Play\\SanPlay; use Chess\\Tutor\\PgnExplanation; $movetext = '1.Nf3 d5 2.g3 c5'; $board = (new SanPlay($movetext))->validate()->getBoard(); $paragraph = (new PgnExplanation('d4', $board->toFen()))->getParagraph(); $text = implode(' ', $paragraph); echo $text; Black has a kind of space advantage. The pawn on c5 is unprotected. The resulting text may sound a little robotic but it can be easily rephrased by the AI of your choice to make it sound more human-like. Also a quick numerical estimate of the position can be obtained by passing the $isEvaluated parameter to the constructor. use Chess\\Tutor\\PgnExplanation; $paragraph = (new PgnExplanation('Bxe6+', '8/5k2/4n3/8/8/1BK5/1B6/8 w - - 0 1', $isEvaluated = true)) ->getParagraph(); $text = implode(' ', $paragraph); echo $text; White has a decisive material advantage. White is just controlling the center. White has a total space advantage. The white pieces are timidly approaching the other side's king. The bishop on e6 is unprotected. Overall, 6 heuristic evaluation features are favoring White while 1 is favoring Black. \ud83c\udf89 Let's do this!","title":"Explain PGN"},{"location":"data-conversion/","text":"Data Conversion FEN to Board \u2728 FEN stands for Forsyth-Edwards Notation and is the standard way for describing chess positions using text strings. Almost everything in PHP Chess can be done with a chessboard object. At some point you'll definitely want to convert a FEN string into a chessboard object for further processing, and this can be done with the Chess\\FenToBoard class according to the variants supported. Let's continue a classical game from the FEN position of B54, which is the ECO code for \"Sicilian Defense: Modern Variations, Main Line\" previously discussed in Read PGN . use Chess\\FenToBoard; $board = FenToBoard::create('rnbqkb1r/pp2pppp/3p1n2/8/3NP3/8/PPP2PPP/RNBQKB1R w KQkq -'); $board->play('w', 'Nc3'); $board->play('b', 'Nc6'); echo $board->toFen(); r1bqkb1r/pp2pppp/2np1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - It is worth saying that after 5.Nc3 Nc6, B54 has turned into B56 which is the ECO code for \"Sicilian Defense: Classical Variation\" and the history contains two moves only. var_dump($board->getHistory()); array(2) { [0]=> object(stdClass)#323 (4) { [\"castlingAbility\"]=> string(4) \"KQkq\" [\"sq\"]=> string(2) \"b1\" [\"move\"]=> object(stdClass)#2 (7) { [\"pgn\"]=> string(3) \"Nc3\" [\"isCapture\"]=> bool(false) [\"isCheck\"]=> bool(false) [\"type\"]=> string(48) \"N[a-h]{0,1}[1-8]{0,1}[a-h]{1}[1-8]{1}[\\+\\#]{0,1}\" [\"color\"]=> string(1) \"w\" [\"id\"]=> string(1) \"N\" [\"sq\"]=> object(stdClass)#3 (2) { [\"current\"]=> string(0) \"\" [\"next\"]=> string(2) \"c3\" } } [\"fen\"]=> string(59) \"rnbqkb1r/pp2pppp/3p1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R b KQkq -\" } [1]=> object(stdClass)#581 (4) { [\"castlingAbility\"]=> string(4) \"KQkq\" [\"sq\"]=> string(2) \"b8\" [\"move\"]=> object(stdClass)#82 (7) { [\"pgn\"]=> string(3) \"Nc6\" [\"isCapture\"]=> bool(false) [\"isCheck\"]=> bool(false) [\"type\"]=> string(48) \"N[a-h]{0,1}[1-8]{0,1}[a-h]{1}[1-8]{1}[\\+\\#]{0,1}\" [\"color\"]=> string(1) \"b\" [\"id\"]=> string(1) \"N\" [\"sq\"]=> object(stdClass)#59 (2) { [\"current\"]=> string(0) \"\" [\"next\"]=> string(2) \"c6\" } } [\"fen\"]=> string(60) \"r1bqkb1r/pp2pppp/2np1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq -\" } } The initial FEN string is always accessible through the getStartFen() method. echo $board->getStartFen(); rnbqkb1r/pp2pppp/3p1n2/8/3NP3/8/PPP2PPP/RNBQKB1R w KQkq - \ud83c\udf89 Well done! You just learned a well-known and frequently played chess opening. Board to PNG Image \u2728 PNG stands for Portable Network Graphics and is a widely used format for image files. Not to be confused with PGN, the text-based file format to annotate chess games. Chess\\Media\\BoardToPng converts a chess board object to a PNG image. use Chess\\FenToBoard; use Chess\\Media\\BoardToPng; $board = FenToBoard::create('1rbq1rk1/p1b1nppp/1p2p3/8/1B1pN3/P2B4/1P3PPP/2RQ1R1K w - - bm Nf6+'); $filename = (new BoardToPng($board, $flip = true))->output(); \ud83c\udf89 Try this thing! Share a puzzling chess position with friends for further study. Board to MP4 \u2728 Text-based PGN movetexts can be easily converted to MP4, a widely-used video format which comes in handy for pausing the games. Chess\\Media\\BoardToMp4 allows to convert a chess board object to an MP4 video. use Chess\\Media\\BoardToMp4; use Chess\\Variant\\Classical\\Board; $movetext = '1.d4 Nf6 2.c4 c5 3.d5 e6 4.Nc3 exd5 5.cxd5 d6 6.e4 g6 7.Nf3 Bg7'; $board = new Board(); $filename = (new BoardToMp4( $movetext, $board, $flip = false ))->output(__DIR__.'/../../storage/tmp'); \ud83c\udf89 That's it!","title":"Data Conversion"},{"location":"data-conversion/#data-conversion","text":"","title":"Data Conversion"},{"location":"data-conversion/#fen-to-board","text":"\u2728 FEN stands for Forsyth-Edwards Notation and is the standard way for describing chess positions using text strings. Almost everything in PHP Chess can be done with a chessboard object. At some point you'll definitely want to convert a FEN string into a chessboard object for further processing, and this can be done with the Chess\\FenToBoard class according to the variants supported. Let's continue a classical game from the FEN position of B54, which is the ECO code for \"Sicilian Defense: Modern Variations, Main Line\" previously discussed in Read PGN . use Chess\\FenToBoard; $board = FenToBoard::create('rnbqkb1r/pp2pppp/3p1n2/8/3NP3/8/PPP2PPP/RNBQKB1R w KQkq -'); $board->play('w', 'Nc3'); $board->play('b', 'Nc6'); echo $board->toFen(); r1bqkb1r/pp2pppp/2np1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - It is worth saying that after 5.Nc3 Nc6, B54 has turned into B56 which is the ECO code for \"Sicilian Defense: Classical Variation\" and the history contains two moves only. var_dump($board->getHistory()); array(2) { [0]=> object(stdClass)#323 (4) { [\"castlingAbility\"]=> string(4) \"KQkq\" [\"sq\"]=> string(2) \"b1\" [\"move\"]=> object(stdClass)#2 (7) { [\"pgn\"]=> string(3) \"Nc3\" [\"isCapture\"]=> bool(false) [\"isCheck\"]=> bool(false) [\"type\"]=> string(48) \"N[a-h]{0,1}[1-8]{0,1}[a-h]{1}[1-8]{1}[\\+\\#]{0,1}\" [\"color\"]=> string(1) \"w\" [\"id\"]=> string(1) \"N\" [\"sq\"]=> object(stdClass)#3 (2) { [\"current\"]=> string(0) \"\" [\"next\"]=> string(2) \"c3\" } } [\"fen\"]=> string(59) \"rnbqkb1r/pp2pppp/3p1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R b KQkq -\" } [1]=> object(stdClass)#581 (4) { [\"castlingAbility\"]=> string(4) \"KQkq\" [\"sq\"]=> string(2) \"b8\" [\"move\"]=> object(stdClass)#82 (7) { [\"pgn\"]=> string(3) \"Nc6\" [\"isCapture\"]=> bool(false) [\"isCheck\"]=> bool(false) [\"type\"]=> string(48) \"N[a-h]{0,1}[1-8]{0,1}[a-h]{1}[1-8]{1}[\\+\\#]{0,1}\" [\"color\"]=> string(1) \"b\" [\"id\"]=> string(1) \"N\" [\"sq\"]=> object(stdClass)#59 (2) { [\"current\"]=> string(0) \"\" [\"next\"]=> string(2) \"c6\" } } [\"fen\"]=> string(60) \"r1bqkb1r/pp2pppp/2np1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq -\" } } The initial FEN string is always accessible through the getStartFen() method. echo $board->getStartFen(); rnbqkb1r/pp2pppp/3p1n2/8/3NP3/8/PPP2PPP/RNBQKB1R w KQkq - \ud83c\udf89 Well done! You just learned a well-known and frequently played chess opening.","title":"FEN to Board"},{"location":"data-conversion/#board-to-png-image","text":"\u2728 PNG stands for Portable Network Graphics and is a widely used format for image files. Not to be confused with PGN, the text-based file format to annotate chess games. Chess\\Media\\BoardToPng converts a chess board object to a PNG image. use Chess\\FenToBoard; use Chess\\Media\\BoardToPng; $board = FenToBoard::create('1rbq1rk1/p1b1nppp/1p2p3/8/1B1pN3/P2B4/1P3PPP/2RQ1R1K w - - bm Nf6+'); $filename = (new BoardToPng($board, $flip = true))->output(); \ud83c\udf89 Try this thing! Share a puzzling chess position with friends for further study.","title":"Board to PNG Image"},{"location":"data-conversion/#board-to-mp4","text":"\u2728 Text-based PGN movetexts can be easily converted to MP4, a widely-used video format which comes in handy for pausing the games. Chess\\Media\\BoardToMp4 allows to convert a chess board object to an MP4 video. use Chess\\Media\\BoardToMp4; use Chess\\Variant\\Classical\\Board; $movetext = '1.d4 Nf6 2.c4 c5 3.d5 e6 4.Nc3 exd5 5.cxd5 d6 6.e4 g6 7.Nf3 Bg7'; $board = new Board(); $filename = (new BoardToMp4( $movetext, $board, $flip = false ))->output(__DIR__.'/../../storage/tmp'); \ud83c\udf89 That's it!","title":"Board to MP4"},{"location":"getting-started/","text":"Getting Started \u2728 Some familiarity with chess terms and concepts is required but if you're new to chess this tutorial will guide you through how to easily create amazing apps with PHP Chess. Happy coding and learning! The Chess\\Variant\\Classical\\Board class is the easiest way to get started with PHP Chess. use Chess\\Variant\\Classical\\Board; $board = new Board(); Then, you're set up to play classical chess either in PGN or LAN format. In PGN format: $board->play('w', 'e4'); In LAN format: $board->playLan('w', 'e2e4'); Have you ever attended a chess tournament or watched one streamed on a website? If so, you've probably noticed that each player writes down their move on a piece of paper. PGN stands for Portable Game Notation and is a human-readable format that allows chess players to read and write chess games. Computers and graphical user interfaces (GUI) often prefer an easy-to-use, machine-readable format called Long Algebraic Notation (LAN) instead. So, for example, if you're integrating a JavaScript chessboard with a backend, you may want to make the chess moves in LAN format. On the other hand, PGN is more suitable for loading games annotated by humans. Be that as it may, every time a move is made, the state of the board changes. var_dump($board->toFen()); string(55) \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3\" This is the chess position in Forsyth\u2013Edwards Notation (FEN) format after 1.e4. \ud83c\udf89 Congrats! 1.e4 is one of the best moves to start with.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"\u2728 Some familiarity with chess terms and concepts is required but if you're new to chess this tutorial will guide you through how to easily create amazing apps with PHP Chess. Happy coding and learning! The Chess\\Variant\\Classical\\Board class is the easiest way to get started with PHP Chess. use Chess\\Variant\\Classical\\Board; $board = new Board(); Then, you're set up to play classical chess either in PGN or LAN format. In PGN format: $board->play('w', 'e4'); In LAN format: $board->playLan('w', 'e2e4'); Have you ever attended a chess tournament or watched one streamed on a website? If so, you've probably noticed that each player writes down their move on a piece of paper. PGN stands for Portable Game Notation and is a human-readable format that allows chess players to read and write chess games. Computers and graphical user interfaces (GUI) often prefer an easy-to-use, machine-readable format called Long Algebraic Notation (LAN) instead. So, for example, if you're integrating a JavaScript chessboard with a backend, you may want to make the chess moves in LAN format. On the other hand, PGN is more suitable for loading games annotated by humans. Be that as it may, every time a move is made, the state of the board changes. var_dump($board->toFen()); string(55) \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3\" This is the chess position in Forsyth\u2013Edwards Notation (FEN) format after 1.e4. \ud83c\udf89 Congrats! 1.e4 is one of the best moves to start with.","title":"Getting Started"},{"location":"heuristics/","text":"Heuristics \u2728 If you ask a chess pro why a chess move is good, they'll probably give you a bunch of reasons, many of them intuitive, about why they made that decision. It is important to develop your pieces in the opening while trying to control the center of the board at the same time. Castling is an excellent move as long as the king gets safe. Then, in the middlegame space becomes an advantage. And if a complex position can be simplified when you have an advantage, then so much the better. The pawn structure could determine the endgame. The list of reasons goes on and on. The mathematician Claude Shannon came to the conclusion that there are more chess moves than atoms in the universe. The game is complex and you need to learn how to make decisions to play chess like a pro. Since no human can calculate more than, let's say 30 moves ahead, it's all about thinking in terms of heuristics. Heuristics are quick, mental shortcuts that we humans use to make decisions and solve problems in our daily lives. While far from being perfect, heuristics are approximations that help manage cognitive load. Listed below are the chess heuristics implemented in PHP Chess. Heuristic Evaluation Absolute fork Chess\\Eval\\AbsoluteForkEval Absolute pin Chess\\Eval\\AbsolutePinEval Absolute skewer Chess\\Eval\\AbsoluteSkewerEval Advanced pawn Chess\\Eval\\AdvancedPawnEval Attack Chess\\Eval\\AttackEval Backward pawn Chess\\Eval\\BackwardPawnEval Bad bishop Chess\\Eval\\BadBishopEval Bishop outpost Chess\\Eval\\BishopOutpostEval Bishop pair Chess\\Eval\\BishopPairEval Center Chess\\Eval\\CenterEval Connectivity Chess\\Eval\\ConnectivityEval Defense Chess\\Eval\\DefenseEval Diagonal opposition Chess\\Eval\\DiagonalOppositionEval Direct opposition Chess\\Eval\\DirectOppositionEval Doubled pawn Chess\\Eval\\DoubledPawnEval Far-advanced pawn Chess\\Eval\\FarAdvancedPawnEval Isolated pawn Chess\\Eval\\IsolatedPawnEval King safety Chess\\Eval\\KingSafetyEval Knight outpost Chess\\Eval\\KnightOutpostEval Material Chess\\Eval\\MaterialEval Passed pawn Chess\\Eval\\PassedPawnEval Pressure Chess\\Eval\\PressureEval Protection Chess\\Eval\\ProtectionEval Relative fork Chess\\Eval\\RelativeForkEval Relative pin Chess\\Eval\\RelativePinEval Space Chess\\Eval\\SpaceEval Square outpost Chess\\Eval\\SqOutpostEval Threat Chess\\Eval\\ThreatEval The evaluation features are used in two heuristics classes: Chess\\Heuristics\\FenHeuristics and Chess\\Heuristics\\SanHeuristics . The former allows to transform a FEN position to numbers while the latter transforms an entire chess game in SAN format to numbers. use Chess\\FenToBoard; use Chess\\Function\\StandardFunction; use Chess\\Heuristics\\FenHeuristics; $fen = 'rnbqkb1r/p1pp1ppp/1p2pn2/8/2PP4/2N2N2/PP2PPPP/R1BQKB1R b KQkq -'; $board = FenToBoard::create($fen); $result = [ 'names' => (new StandardFunction())->names(), 'balance' => (new FenHeuristics($board))->getBalance(), ]; print_r($result); Array ( [names] => Array ( [0] => Material [1] => Center [2] => Connectivity [3] => Space [4] => Pressure [5] => King safety [6] => Protection [7] => Threat [8] => Attack [9] => Doubled pawn [10] => Passed pawn [11] => Advanced pawn [12] => Far-advanced pawn [13] => Isolated pawn [14] => Backward pawn [15] => Defense [16] => Absolute skewer [17] => Absolute pin [18] => Relative pin [19] => Absolute fork [20] => Relative fork [21] => Outpost square [22] => Knight outpost [23] => Bishop outpost [24] => Bishop pair [25] => Bad bishop [26] => Diagonal opposition [27] => Direct opposition ) [balance] => Array ( [0] => 0 [1] => 12.4 [2] => 0 [3] => 3 [4] => 0 [5] => 0 [6] => 0 [7] => 0 [8] => 0 [9] => 0 [10] => 0 [11] => 0 [12] => 0 [13] => 0 [14] => 0 [15] => 0 [16] => 0 [17] => 0 [18] => 0 [19] => 0 [20] => 0 [21] => 0 [22] => 0 [23] => 0 [24] => 0 [25] => 0 [26] => 0 [27] => 0 ) ) A chess game can be plotted in terms of balance. +1 is the best possible evaluation for White and -1 the best possible evaluation for Black. Both forces being set to 0 means they're balanced. use Chess\\Function\\StandardFunction; use Chess\\Heuristics\\SanHeuristics; $movetext = '1.d4 Nf6 2.c4 e6 3.Nf3 b6 4.Nc3'; $result = [ 'names' => (new StandardFunction())->names(), 'balance' => (new SanHeuristics($movetext))->getBalance(), ]; print_r($result); Figure 1. Heuristics of 1.d4 Nf6 2.c4 e6 3.Nf3 b6 4.Nc3 \ud83c\udf89 There it is! Chess positions converted to numbers can be processed with machine learning techniques.","title":"Heuristics"},{"location":"heuristics/#heuristics","text":"\u2728 If you ask a chess pro why a chess move is good, they'll probably give you a bunch of reasons, many of them intuitive, about why they made that decision. It is important to develop your pieces in the opening while trying to control the center of the board at the same time. Castling is an excellent move as long as the king gets safe. Then, in the middlegame space becomes an advantage. And if a complex position can be simplified when you have an advantage, then so much the better. The pawn structure could determine the endgame. The list of reasons goes on and on. The mathematician Claude Shannon came to the conclusion that there are more chess moves than atoms in the universe. The game is complex and you need to learn how to make decisions to play chess like a pro. Since no human can calculate more than, let's say 30 moves ahead, it's all about thinking in terms of heuristics. Heuristics are quick, mental shortcuts that we humans use to make decisions and solve problems in our daily lives. While far from being perfect, heuristics are approximations that help manage cognitive load. Listed below are the chess heuristics implemented in PHP Chess. Heuristic Evaluation Absolute fork Chess\\Eval\\AbsoluteForkEval Absolute pin Chess\\Eval\\AbsolutePinEval Absolute skewer Chess\\Eval\\AbsoluteSkewerEval Advanced pawn Chess\\Eval\\AdvancedPawnEval Attack Chess\\Eval\\AttackEval Backward pawn Chess\\Eval\\BackwardPawnEval Bad bishop Chess\\Eval\\BadBishopEval Bishop outpost Chess\\Eval\\BishopOutpostEval Bishop pair Chess\\Eval\\BishopPairEval Center Chess\\Eval\\CenterEval Connectivity Chess\\Eval\\ConnectivityEval Defense Chess\\Eval\\DefenseEval Diagonal opposition Chess\\Eval\\DiagonalOppositionEval Direct opposition Chess\\Eval\\DirectOppositionEval Doubled pawn Chess\\Eval\\DoubledPawnEval Far-advanced pawn Chess\\Eval\\FarAdvancedPawnEval Isolated pawn Chess\\Eval\\IsolatedPawnEval King safety Chess\\Eval\\KingSafetyEval Knight outpost Chess\\Eval\\KnightOutpostEval Material Chess\\Eval\\MaterialEval Passed pawn Chess\\Eval\\PassedPawnEval Pressure Chess\\Eval\\PressureEval Protection Chess\\Eval\\ProtectionEval Relative fork Chess\\Eval\\RelativeForkEval Relative pin Chess\\Eval\\RelativePinEval Space Chess\\Eval\\SpaceEval Square outpost Chess\\Eval\\SqOutpostEval Threat Chess\\Eval\\ThreatEval The evaluation features are used in two heuristics classes: Chess\\Heuristics\\FenHeuristics and Chess\\Heuristics\\SanHeuristics . The former allows to transform a FEN position to numbers while the latter transforms an entire chess game in SAN format to numbers. use Chess\\FenToBoard; use Chess\\Function\\StandardFunction; use Chess\\Heuristics\\FenHeuristics; $fen = 'rnbqkb1r/p1pp1ppp/1p2pn2/8/2PP4/2N2N2/PP2PPPP/R1BQKB1R b KQkq -'; $board = FenToBoard::create($fen); $result = [ 'names' => (new StandardFunction())->names(), 'balance' => (new FenHeuristics($board))->getBalance(), ]; print_r($result); Array ( [names] => Array ( [0] => Material [1] => Center [2] => Connectivity [3] => Space [4] => Pressure [5] => King safety [6] => Protection [7] => Threat [8] => Attack [9] => Doubled pawn [10] => Passed pawn [11] => Advanced pawn [12] => Far-advanced pawn [13] => Isolated pawn [14] => Backward pawn [15] => Defense [16] => Absolute skewer [17] => Absolute pin [18] => Relative pin [19] => Absolute fork [20] => Relative fork [21] => Outpost square [22] => Knight outpost [23] => Bishop outpost [24] => Bishop pair [25] => Bad bishop [26] => Diagonal opposition [27] => Direct opposition ) [balance] => Array ( [0] => 0 [1] => 12.4 [2] => 0 [3] => 3 [4] => 0 [5] => 0 [6] => 0 [7] => 0 [8] => 0 [9] => 0 [10] => 0 [11] => 0 [12] => 0 [13] => 0 [14] => 0 [15] => 0 [16] => 0 [17] => 0 [18] => 0 [19] => 0 [20] => 0 [21] => 0 [22] => 0 [23] => 0 [24] => 0 [25] => 0 [26] => 0 [27] => 0 ) ) A chess game can be plotted in terms of balance. +1 is the best possible evaluation for White and -1 the best possible evaluation for Black. Both forces being set to 0 means they're balanced. use Chess\\Function\\StandardFunction; use Chess\\Heuristics\\SanHeuristics; $movetext = '1.d4 Nf6 2.c4 e6 3.Nf3 b6 4.Nc3'; $result = [ 'names' => (new StandardFunction())->names(), 'balance' => (new SanHeuristics($movetext))->getBalance(), ]; print_r($result); Figure 1. Heuristics of 1.d4 Nf6 2.c4 e6 3.Nf3 b6 4.Nc3 \ud83c\udf89 There it is! Chess positions converted to numbers can be processed with machine learning techniques.","title":"Heuristics"},{"location":"installation/","text":"Installation Requirements PHP >= 8.1 You may want to optionally install Stockfish >= 15.1 as it is described in Play Computer . Composer installation composer require chesslablab/php-chess","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"PHP >= 8.1 You may want to optionally install Stockfish >= 15.1 as it is described in Play Computer .","title":"Requirements"},{"location":"installation/#composer-installation","text":"composer require chesslablab/php-chess","title":"Composer installation"},{"location":"play-chess/","text":"Play Chess Play Like a Pro \u2728 The players.json file in the Chess Server contains thousands of games by titled FIDE players. This file can be generated and customized with the command line tools available in the Chess Data repo. Chess\\Grandmaster figures out the next move to be made based on the JSON file that is passed to its constructor. Please make sure to first create one for it or feel free to use the players.json linked above. use Chess\\Grandmaster; use Chess\\Variant\\Classical\\Board; $board = new Board(); $board->play('w', 'e4'); $move = (new Grandmaster(__DIR__.'/../data/players.json'))->move($board); print_r($move); stdClass Object ( [move] => e5 [game] => Array ( [Event] => Barmen-B [Site] => Barmen [Date] => 1905.??.?? [White] => Neumann, Augustin [Black] => Spielmann, Rudolf [Result] => 1/2-1/2 [ECO] => C63 [movetext] => 1.e4 e5 2.Nf3 Nc6 3.Bb5 f5 4.exf5 e4 5.Qe2 Qe7 6.Bxc6 bxc6 7.Nd4 Nf6 8.O-O c5 9.Nb5 d5 10.f3 c6 11.N5c3 Bxf5 12.fxe4 Bxe4 13.Nxe4 Qxe4 14.Qa6 Qe6 15.d3 Be7 16.Bf4 O-O 17.Nd2 Nh5 18.Rae1 Qg4 19.h3 Qg6 20.Be5 Bh4 21.Rxf8+ Rxf8 22.Rf1 Rxf1+ 23.Kxf1 Qe6 24.Nf3 Bg3 25.Bxg3 Nxg3+ 26.Kf2 Nf5 27.Kg1 h6 28.Qxa7 Qe3+ 29.Kh2 Qf4+ 30.Kg1 Qe3+ 31.Kh2 Qf2 32.Qd7 Ne3 33.Qe8+ Kh7 ) ) 1.e4 e5 is the move that a grandmaster would play. As you can see in this example, Chess\\Grandmaster could find a response to 1.e4 returning the corresponding game's metadata. \ud83c\udf89 Let's now put our knowledge of chess openings to the test. Play Computer \u2728 UCI engines not only allow to play chess with the computer but are also a helpful tool when analyzing chess games. Chess\\UciEngine\\Stockfish allows to play chess against the Stockfish chess engine using PHP, but first things first, make sure to install it on your computer. sudo apt-get install stockfish Then, you're set up to play chess against Stockfish as described in the following example. use Chess\\UciEngine\\Stockfish; use Chess\\Variant\\Classical\\Board; $board = new Board(); $board->play('w', 'e4'); $stockfish = (new Stockfish($board)) ->setOptions([ 'Skill Level' => 9 ]) ->setParams([ 'depth' => 3 ]); $lan = $stockfish->play($board->toFen()); $board->playLan('b', $lan); PHP Chess classes can be combined to do different things. For example, you may want to play against Stockfish from this FEN position published in your favorite online publication. use Chess\\FenToBoard; use Chess\\UciEngine\\Stockfish; $board = FenToBoard::create('4k2r/pp1b1pp1/8/3pPp1p/P2P1P2/1P3N2/1qr3PP/R3QR1K w k -'); $stockfish = (new Stockfish($board)) ->setOptions([ 'Skill Level' => 20 ]) ->setParams([ 'depth' => 12 ]); $lan = $stockfish->play($board->toFen()); $board->playLan('w', $lan); echo $board->getMovetext(); 1.Qb4 The FEN is converted to a chessboard object as described in Convert FEN to Board . The Skill Level is set to 20 and the depth is set to 12 in order to get a more accurate response from Stockfish. The same thing goes for PGN annotated games. This is how to play against Stockfish after loading a SAN movetext into a chess board object. use Chess\\Play\\SanPlay; use Chess\\UciEngine\\Stockfish; $movetext = '1.d4 Nf6 2.c4 c5 3.d5 e6 4.Nc3 exd5 5.cxd5 d6 6.e4 g6 7.Nf3 Bg7'; $board = (new SanPlay($movetext)) ->validate() ->getBoard(); $stockfish = (new Stockfish($board)) ->setOptions([ 'Skill Level' => 20 ]) ->setParams([ 'depth' => 12 ]); $lan = $stockfish->play($board->toFen()); $board->playLan('w', $lan); echo $board->getMovetext(); 1.d4 Nf6 2.c4 c5 3.d5 e6 4.Nc3 exd5 5.cxd5 d6 6.e4 g6 7.Nf3 Bg7 8.h3 As you can see, Stockfish responds with 8.h3. \ud83c\udf89 Can you beat the computer? Keep it up!","title":"Play Chess"},{"location":"play-chess/#play-chess","text":"","title":"Play Chess"},{"location":"play-chess/#play-like-a-pro","text":"\u2728 The players.json file in the Chess Server contains thousands of games by titled FIDE players. This file can be generated and customized with the command line tools available in the Chess Data repo. Chess\\Grandmaster figures out the next move to be made based on the JSON file that is passed to its constructor. Please make sure to first create one for it or feel free to use the players.json linked above. use Chess\\Grandmaster; use Chess\\Variant\\Classical\\Board; $board = new Board(); $board->play('w', 'e4'); $move = (new Grandmaster(__DIR__.'/../data/players.json'))->move($board); print_r($move); stdClass Object ( [move] => e5 [game] => Array ( [Event] => Barmen-B [Site] => Barmen [Date] => 1905.??.?? [White] => Neumann, Augustin [Black] => Spielmann, Rudolf [Result] => 1/2-1/2 [ECO] => C63 [movetext] => 1.e4 e5 2.Nf3 Nc6 3.Bb5 f5 4.exf5 e4 5.Qe2 Qe7 6.Bxc6 bxc6 7.Nd4 Nf6 8.O-O c5 9.Nb5 d5 10.f3 c6 11.N5c3 Bxf5 12.fxe4 Bxe4 13.Nxe4 Qxe4 14.Qa6 Qe6 15.d3 Be7 16.Bf4 O-O 17.Nd2 Nh5 18.Rae1 Qg4 19.h3 Qg6 20.Be5 Bh4 21.Rxf8+ Rxf8 22.Rf1 Rxf1+ 23.Kxf1 Qe6 24.Nf3 Bg3 25.Bxg3 Nxg3+ 26.Kf2 Nf5 27.Kg1 h6 28.Qxa7 Qe3+ 29.Kh2 Qf4+ 30.Kg1 Qe3+ 31.Kh2 Qf2 32.Qd7 Ne3 33.Qe8+ Kh7 ) ) 1.e4 e5 is the move that a grandmaster would play. As you can see in this example, Chess\\Grandmaster could find a response to 1.e4 returning the corresponding game's metadata. \ud83c\udf89 Let's now put our knowledge of chess openings to the test.","title":"Play Like a Pro"},{"location":"play-chess/#play-computer","text":"\u2728 UCI engines not only allow to play chess with the computer but are also a helpful tool when analyzing chess games. Chess\\UciEngine\\Stockfish allows to play chess against the Stockfish chess engine using PHP, but first things first, make sure to install it on your computer. sudo apt-get install stockfish Then, you're set up to play chess against Stockfish as described in the following example. use Chess\\UciEngine\\Stockfish; use Chess\\Variant\\Classical\\Board; $board = new Board(); $board->play('w', 'e4'); $stockfish = (new Stockfish($board)) ->setOptions([ 'Skill Level' => 9 ]) ->setParams([ 'depth' => 3 ]); $lan = $stockfish->play($board->toFen()); $board->playLan('b', $lan); PHP Chess classes can be combined to do different things. For example, you may want to play against Stockfish from this FEN position published in your favorite online publication. use Chess\\FenToBoard; use Chess\\UciEngine\\Stockfish; $board = FenToBoard::create('4k2r/pp1b1pp1/8/3pPp1p/P2P1P2/1P3N2/1qr3PP/R3QR1K w k -'); $stockfish = (new Stockfish($board)) ->setOptions([ 'Skill Level' => 20 ]) ->setParams([ 'depth' => 12 ]); $lan = $stockfish->play($board->toFen()); $board->playLan('w', $lan); echo $board->getMovetext(); 1.Qb4 The FEN is converted to a chessboard object as described in Convert FEN to Board . The Skill Level is set to 20 and the depth is set to 12 in order to get a more accurate response from Stockfish. The same thing goes for PGN annotated games. This is how to play against Stockfish after loading a SAN movetext into a chess board object. use Chess\\Play\\SanPlay; use Chess\\UciEngine\\Stockfish; $movetext = '1.d4 Nf6 2.c4 c5 3.d5 e6 4.Nc3 exd5 5.cxd5 d6 6.e4 g6 7.Nf3 Bg7'; $board = (new SanPlay($movetext)) ->validate() ->getBoard(); $stockfish = (new Stockfish($board)) ->setOptions([ 'Skill Level' => 20 ]) ->setParams([ 'depth' => 12 ]); $lan = $stockfish->play($board->toFen()); $board->playLan('w', $lan); echo $board->getMovetext(); 1.d4 Nf6 2.c4 c5 3.d5 e6 4.Nc3 exd5 5.cxd5 d6 6.e4 g6 7.Nf3 Bg7 8.h3 As you can see, Stockfish responds with 8.h3. \ud83c\udf89 Can you beat the computer? Keep it up!","title":"Play Computer"},{"location":"read-moves/","text":"Read Moves Portable Game Notation (PGN) \u2728 Portable Game Notation is a human-readable text format that allows chess players to read and write chess games. Multiple variants are supported with the default one being classical chess. Variant Chessboard Capablanca Chess\\Variant\\Capablanca\\Board Capablanca-Fischer Chess\\Variant\\CapablancaFischer\\Board Chess960 Chess\\Variant\\Chess960\\Board Classical Chess\\Variant\\Classical\\Board There is no such thing as a chess opening in either Capablanca chess or Chess960. Those two variants were originally conceived to minimize memorization so when it comes to chess openings, it is assumed that we're in the realms of classical chess. Let's now have a look at B54 which is the ECO code for \"Sicilian Defense: Modern Variations, Main Line\". use Chess\\Variant\\Classical\\Board; $board = new Board(); $board->play('w', 'e4'); $board->play('b', 'c5'); $board->play('w', 'Nf3'); $board->play('b', 'd6'); $board->play('w', 'd4'); $board->play('b', 'cxd4'); $board->play('w', 'Nxd4'); echo $board->toAsciiString(); r n b q k b n r p p . . p p p p . . . p . . . . . . . . . . . . . . . N P . . . . . . . . . . . P P P . . P P P R N B Q K B . R As discussed in Getting Started , the PGN format is convenient for when reading chess games annotated by humans, for example, those ones available in online databases or published in chess websites. 1.e4 e5 2.Nf3 Nf6 3.d4 Nxe4 4.Bd3 d5 5.Nxe5 Nd7 6.Nxd7 Bxd7 7.Nd2 Nxd2 8.Bxd2 Bd6 9.O-O h5 10.Qe1+ Kf8 11.Bb4 Qe7 12.Bxd6 Qxd6 13.Qd2 Re8 14.Rae1 Rh6 15.Qg5 c6 16.Rxe8+ Bxe8 17.Re1 Qf6 18.Qe3 Bd7 19.h3 h4 20.c4 dxc4 21.Bxc4 b5 22.Qa3+ Kg8 23.Qxa7 Qd8 24.Bb3 Rd6 25.Re4 Be6 26.Bxe6 Rxe6 27.Rxe6 fxe6 28.Qc5 Qa5 29.Qxc6 Qe1+ 30.Kh2 Qxf2 31.Qxe6+ Kh7 32.Qe4+ Kg8 33.b3 Qxa2 34.Qe8+ Kh7 35.Qxb5 Qf2 36.Qe5 Qb2 37.Qe4+ Kg8 38.Qd3 Qf2 39.Qc3 Qf4+ 40.Kg1 Kh7 41.Qd3+ g6 42.Qd1 Qe3+ 43.Kh1 g5 44.d5 g4 45.hxg4 h3 46.Qf3 1\u20130 World Chess Championship 2021. (2023, July 3). In Wikipedia. https://en.wikipedia.org/wiki/World_Chess_Championship_2021 So far so good, but if you're new to chess you may well play a wrong move in the Sicilian Defense: 4...Na6. $board->play('b', 'Na6'); echo $board->toAsciiString(); r . b q k b n r p p . . p p p p n . . p . . . . . . . . . . . . . . . N P . . . . . . . . . . . P P P . . P P P R N B Q K B . R No worries! We've all been there. The undo() method comes to the rescue to fix mistakes like this one. $board = $board->undo(); $board->play('b', 'Nf6'); echo $board->getMovetext(); 1.e4 c5 2.Nf3 d6 3.d4 cxd4 4.Nxd4 Nf6 Now, what if you want to play a bunch of PGN moves at once instead of one by one as in the previous example? This is a common use case, and Chess\\Play\\SanPlay allows to easily do so. As it name implies, this class is intended to play a Standard Algebaric Notation (SAN) movetext. The validate() method will throw a Chess\\Exception\\PlayException if the movetext is not valid. use Chess\\Play\\SanPlay; $movetext = '1.e4 c5 2.Nf3 d6 3.d4 cxd4 4.Nxd4 Nf6'; $board = (new SanPlay($movetext)) ->validate() ->getBoard(); echo $board->toAsciiString(); r n b q k b . r p p . . p p p p . . . p . n . . . . . . . . . . . . . N P . . . . . . . . . . . P P P . . P P P R N B Q K B . R The game can be continued from this position \u2014 remember, almost everything in PHP Chess is done using a chessboard object. $board->play('w', 'Bb5+'); echo $board->toAsciiString(); r n b q k b . r p p . . p p p p . . . p . n . . . B . . . . . . . . . N P . . . . . . . . . . . P P P . . P P P R N B Q K . . R Every time a move is made, the state of the board changes and now the white king is in check. var_dump($board->isCheck()); bool(true) Of course the king is not mated in this position. var_dump($board->isMate()); bool(false) Also it is not stalemated. var_dump($board->isStalemate()); bool(false) And it is not a fivefold repetition yet. var_dump($board->isFivefoldRepetition()); bool(false) Otherwise the game would end. Numeric Annotation Glyphs (NAGs) can optionally be used in SAN movetexts, so this is how you'd typically validate a SAN movetext using NAGs for further processing. Remember, the validate() method will throw a Chess\\Exception\\PlayException if the movetext is not valid. use Chess\\Play\\SanPlay; $movetext = '1.e4 c5 2.Nf3 $1 d6 3.d4 cxd4 4.Nxd4 $48 Nf6 $113'; $sanPlay = (new SanPlay($movetext))->validate(); echo $sanPlay->getSanMovetext()->filtered(); 1.e4 c5 2.Nf3 $1 d6 3.d4 cxd4 4.Nxd4 $48 Nf6 $113 NAGs can be removed by passing the false value to the second argument of the filtered() method. echo $sanPlay->getSanMovetext()->filtered($comments = true, $nags = false); 1.e4 c5 2.Nf3 d6 3.d4 cxd4 4.Nxd4 Nf6 \ud83c\udf89 Next, let's learn how to process chess moves from a graphical user interface. Long Algebraic Notation (LAN) \u2728 Computers and graphical user interfaces (GUI) often prefer an easy-to-use, machine-readable format called Long Algebraic Notation. Remember, if reading the main line of the Sicilian Defense from a JavaScript application, you may want to use the LAN format rather than the PGN format. Chances are that the JavaScript chessboard will be using the LAN format for move generation. use Chess\\Variant\\Classical\\Board; $board = new Board(); $board->playLan('w', 'e2e4'); $board->playLan('b', 'c7c5'); $board->playLan('w', 'g1f3'); $board->playLan('b', 'd7d6'); $board->playLan('w', 'd2d4'); $board->playLan('b', 'c5d4'); $board->playLan('w', 'f3d4'); $board->playLan('b', 'g8f6'); echo $board->getMovetext(); 1.e4 c5 2.Nf3 d6 3.d4 cxd4 4.Nxd4 Nf6 Also Chess\\Play\\LanPlay allows to easily play a bunch of LAN moves at once instead of one by one. As it name implies, this class is intended to play a LAN movetext. use Chess\\Play\\LanPlay; $movetext = '1.e2e4 c7c5 2.g1f3 d7d6 3.d2d4 c5d4 4.f3d4 g8f6'; $board = (new LanPlay($movetext)) ->validate() ->getBoard(); echo $board->toAsciiString(); r n b q k b . r p p . . p p p p . . . p . n . . . . . . . . . . . . . N P . . . . . . . . . . . P P P . . P P P R N B Q K B . R \ud83c\udf89 And, it's easy! The UCI protocol enables chess engines to communicate with user interfaces using LAN for moves. Recursive Annotation Variation (RAV) \u2728 RAV stands for Recursive Annotation Variation. This format is especially useful to write and read tutorials about openings, notable games, chess studies and so on. RAV is an extension of the Standard Algebaric Notation (SAN) format and allows to annotate chess variations. After all, a RAV movetext is still a SAN movetext with support for comments. Comments are enclosed in curly brackets. Variations are enclosed in parentheses which can be nested recursively as many times as required with the trait that the previous move may need to be undone in order to play a certain variation. The example below describes how to play the Open Sicilian. 1.e4 c5 {enters the Sicilian Defense, the most popular and best-scoring response to White's first move.} (2.Nf3 {is played in about 80% of Master-level games after which there are three main options for Black.} (2... Nc6) (2... e6) (2... d6 {is Black's most common move.} 3.d4 {lines are collectively known as the Open Sicilian.} cxd4 4.Nxd4 Nf6 5.Nc3 {allows Black choose between four major variations: the Najdorf, Dragon, Classical and Scheveningen.} (5...a6 {is played in the Najdorf variation.}) (5...g6 {is played in the Dragon variation.}) (5...Nc6 {is played in the Classical variation.}) (5...e6 {is played in the Scheveningen variation.}))) Sicilian Defense. (2023, July 2). In Wikipedia. https://en.wikipedia.org/wiki/Sicilian_Defence Then all you need is a RAV reader. Figure 1. The response received from PHP Chess can be displayed as an HTML table. The RAV reader shown in Figure 1 displays the variation levels in different shades of gray. It is a 2D scrollable HTML table where the main line is shown in a white background color. The deeper the level, the darker the background color is displayed. Similarly as with Chess\\Play\\SanPlay and Chess\\Play\\LanPlay, Chess\\Play\\RavPlay allows to play a RAV movetext. The most important method in this class is the getFen() method. This method retrieves the FEN history of a RAV movetext to be displayed for reading purposes as shown in Figure 1. use Chess\\Play\\RavPlay; $movetext = \"1.e4 c5 (2.Nf3 (2... Nc6) (2... e6) (2... d6 3.d4 cxd4 4.Nxd4 Nf6 5.Nc3 (5...a6) (5...g6) (5...Nc6) (5...e6) ) )\"; $ravPlay = (new RavPlay($movetext))->validate(); $fen = $ravPlay->getFen(); print_r($fen); Array ( [0] => rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - [1] => rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 [2] => rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 [3] => rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - [4] => r1bqkbnr/pp1ppppp/2n5/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - [5] => rnbqkbnr/pp1p1ppp/4p3/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - [6] => rnbqkbnr/pp2pppp/3p4/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - [7] => rnbqkbnr/pp2pppp/3p4/2p5/3PP3/5N2/PPP2PPP/RNBQKB1R b KQkq d3 [8] => rnbqkbnr/pp2pppp/3p4/8/3pP3/5N2/PPP2PPP/RNBQKB1R w KQkq - [9] => rnbqkbnr/pp2pppp/3p4/8/3NP3/8/PPP2PPP/RNBQKB1R b KQkq - [10] => rnbqkb1r/pp2pppp/3p1n2/8/3NP3/8/PPP2PPP/RNBQKB1R w KQkq - [11] => rnbqkb1r/pp2pppp/3p1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R b KQkq - [12] => rnbqkb1r/1p2pppp/p2p1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - [13] => rnbqkb1r/pp2pp1p/3p1np1/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - [14] => r1bqkb1r/pp2pppp/2np1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - [15] => rnbqkb1r/pp3ppp/3ppn2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - ) Let's give this a try. Add some comments and get the FEN history. use Chess\\Play\\RavPlay; $movetext = \"1.e4 c5 {enters the Sicilian Defense.} (2.Nf3 (2... Nc6) (2... e6) (2... d6 3.d4 cxd4 4.Nxd4 Nf6 5.Nc3 (5...a6 {is played in the Najdorf variation.}) (5...g6 {is played in the Dragon variation.}) (5...Nc6 {is played in the Classical variation.}) (5...e6 {is played in the Scheveningen variation.}) ) )\"; $ravPlay = (new RavPlay($movetext))->validate(); $fen = $ravPlay->getFen(); print_r($fen); Cool! The result obtained is exactly the same as in the previous example. Array ( [0] => rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - [1] => rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 [2] => rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 [3] => rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - [4] => r1bqkbnr/pp1ppppp/2n5/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - [5] => rnbqkbnr/pp1p1ppp/4p3/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - [6] => rnbqkbnr/pp2pppp/3p4/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - [7] => rnbqkbnr/pp2pppp/3p4/2p5/3PP3/5N2/PPP2PPP/RNBQKB1R b KQkq d3 [8] => rnbqkbnr/pp2pppp/3p4/8/3pP3/5N2/PPP2PPP/RNBQKB1R w KQkq - [9] => rnbqkbnr/pp2pppp/3p4/8/3NP3/8/PPP2PPP/RNBQKB1R b KQkq - [10] => rnbqkb1r/pp2pppp/3p1n2/8/3NP3/8/PPP2PPP/RNBQKB1R w KQkq - [11] => rnbqkb1r/pp2pppp/3p1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R b KQkq - [12] => rnbqkb1r/1p2pppp/p2p1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - [13] => rnbqkb1r/pp2pp1p/3p1np1/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - [14] => r1bqkb1r/pp2pppp/2np1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - [15] => rnbqkb1r/pp3ppp/3ppn2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - ) In both cases the validate() method will throw a Chess\\Exception\\PlayException if the RAV movetext is not valid. This is how to obtain the validated movetext. $movetext = $ravPlay->getRavMovetext()->getMovetext(); You may want to remove tabs and spaces from a valid RAV movetext with the help of the filtered() method. $movetext = $ravPlay->getRavMovetext()->filtered(); echo $movetext; 1.e4 c5 {enters the Sicilian Defense, the most popular and best-scoring response to White's first move.} (2.Nf3 {is played in about 80% of Master-level games after which there are three main options for Black.} (2...Nc6) (2...e6) (2...d6 {is Black's most common move.} 3.d4 {lines are collectively known as the Open Sicilian.} cxd4 4.Nxd4 Nf6 5.Nc3 {allows Black choose between four major variations: the Najdorf, Dragon, Classical and Scheveningen.} (5...a6 {is played in the Najdorf variation.}) (5...g6 {is played in the Dragon variation.}) (5...Nc6 {is played in the Classical variation.}) (5...e6 {is played in the Scheveningen variation.}))) Comments are removed by passing the false value to the first argument of the filtered() method. $movetext = $ravPlay->getRavMovetext()->filtered($comments = false); echo $movetext; 1.e4 c5 (2.Nf3 (2...Nc6) (2...e6) (2...d6 3.d4 cxd4 4.Nxd4 Nf6 5.Nc3 (5...a6) (5...g6) (5...Nc6) (5...e6))) RAV files can also be loaded from a particular FEN position as opposed to the start position. use Chess\\FenToBoard; use Chess\\Play\\RavPlay; $movetext = \"1.Ra7 Kg8 2.Kg2 Kf8 3.Kf3 Ke8 4.Ke4 Kd8 5.Kd5 Kc8 (5...Ke8 6.Kd6 Kf8 7.Ke6 Kg8 8.Kf6 Kh8 9.Kg6 Kg8 10.Ra8#) 6.Kd6 Kb8 (6...Kd8 7.Ra8#) 7.Rc7 Ka8 8.Kc6 Kb8 9.Kb6 Ka8 10.Rc8#\"; $board = FenToBoard::create('7k/8/8/8/8/8/8/R6K w - -'); $ravPlay = (new RavPlay($movetext, $board))->validate(); $fen = $ravPlay->getFen(); print_r($fen); Array ( [0] => 7k/8/8/8/8/8/8/R6K w - - [1] => 7k/R7/8/8/8/8/8/7K b - - [2] => 6k1/R7/8/8/8/8/8/7K w - - [3] => 6k1/R7/8/8/8/8/6K1/8 b - - [4] => 5k2/R7/8/8/8/8/6K1/8 w - - [5] => 5k2/R7/8/8/8/5K2/8/8 b - - [6] => 4k3/R7/8/8/8/5K2/8/8 w - - [7] => 4k3/R7/8/8/4K3/8/8/8 b - - [8] => 3k4/R7/8/8/4K3/8/8/8 w - - [9] => 3k4/R7/8/3K4/8/8/8/8 b - - [10] => 2k5/R7/8/3K4/8/8/8/8 w - - [11] => 4k3/R7/8/3K4/8/8/8/8 w - - [12] => 4k3/R7/3K4/8/8/8/8/8 b - - [13] => 5k2/R7/3K4/8/8/8/8/8 w - - [14] => 5k2/R7/4K3/8/8/8/8/8 b - - [15] => 6k1/R7/4K3/8/8/8/8/8 w - - [16] => 6k1/R7/5K2/8/8/8/8/8 b - - [17] => 7k/R7/5K2/8/8/8/8/8 w - - [18] => 7k/R7/6K1/8/8/8/8/8 b - - [19] => 6k1/R7/6K1/8/8/8/8/8 w - - [20] => R5k1/8/6K1/8/8/8/8/8 b - - [21] => 2k5/R7/3K4/8/8/8/8/8 b - - [22] => 1k6/R7/3K4/8/8/8/8/8 w - - [23] => 3k4/R7/3K4/8/8/8/8/8 w - - [24] => R2k4/8/3K4/8/8/8/8/8 b - - [25] => 1k6/2R5/3K4/8/8/8/8/8 b - - [26] => k7/2R5/3K4/8/8/8/8/8 w - - [27] => k7/2R5/2K5/8/8/8/8/8 b - - [28] => 1k6/2R5/2K5/8/8/8/8/8 w - - [29] => 1k6/2R5/1K6/8/8/8/8/8 b - - [30] => k7/2R5/1K6/8/8/8/8/8 w - - [31] => k1R5/8/1K6/8/8/8/8/8 b - - ) \ud83c\udf89 So this is amazing! That's all we need to read and write chess tutorials, guides and how-tos.","title":"Read Moves"},{"location":"read-moves/#read-moves","text":"","title":"Read Moves"},{"location":"read-moves/#portable-game-notation-pgn","text":"\u2728 Portable Game Notation is a human-readable text format that allows chess players to read and write chess games. Multiple variants are supported with the default one being classical chess. Variant Chessboard Capablanca Chess\\Variant\\Capablanca\\Board Capablanca-Fischer Chess\\Variant\\CapablancaFischer\\Board Chess960 Chess\\Variant\\Chess960\\Board Classical Chess\\Variant\\Classical\\Board There is no such thing as a chess opening in either Capablanca chess or Chess960. Those two variants were originally conceived to minimize memorization so when it comes to chess openings, it is assumed that we're in the realms of classical chess. Let's now have a look at B54 which is the ECO code for \"Sicilian Defense: Modern Variations, Main Line\". use Chess\\Variant\\Classical\\Board; $board = new Board(); $board->play('w', 'e4'); $board->play('b', 'c5'); $board->play('w', 'Nf3'); $board->play('b', 'd6'); $board->play('w', 'd4'); $board->play('b', 'cxd4'); $board->play('w', 'Nxd4'); echo $board->toAsciiString(); r n b q k b n r p p . . p p p p . . . p . . . . . . . . . . . . . . . N P . . . . . . . . . . . P P P . . P P P R N B Q K B . R As discussed in Getting Started , the PGN format is convenient for when reading chess games annotated by humans, for example, those ones available in online databases or published in chess websites. 1.e4 e5 2.Nf3 Nf6 3.d4 Nxe4 4.Bd3 d5 5.Nxe5 Nd7 6.Nxd7 Bxd7 7.Nd2 Nxd2 8.Bxd2 Bd6 9.O-O h5 10.Qe1+ Kf8 11.Bb4 Qe7 12.Bxd6 Qxd6 13.Qd2 Re8 14.Rae1 Rh6 15.Qg5 c6 16.Rxe8+ Bxe8 17.Re1 Qf6 18.Qe3 Bd7 19.h3 h4 20.c4 dxc4 21.Bxc4 b5 22.Qa3+ Kg8 23.Qxa7 Qd8 24.Bb3 Rd6 25.Re4 Be6 26.Bxe6 Rxe6 27.Rxe6 fxe6 28.Qc5 Qa5 29.Qxc6 Qe1+ 30.Kh2 Qxf2 31.Qxe6+ Kh7 32.Qe4+ Kg8 33.b3 Qxa2 34.Qe8+ Kh7 35.Qxb5 Qf2 36.Qe5 Qb2 37.Qe4+ Kg8 38.Qd3 Qf2 39.Qc3 Qf4+ 40.Kg1 Kh7 41.Qd3+ g6 42.Qd1 Qe3+ 43.Kh1 g5 44.d5 g4 45.hxg4 h3 46.Qf3 1\u20130 World Chess Championship 2021. (2023, July 3). In Wikipedia. https://en.wikipedia.org/wiki/World_Chess_Championship_2021 So far so good, but if you're new to chess you may well play a wrong move in the Sicilian Defense: 4...Na6. $board->play('b', 'Na6'); echo $board->toAsciiString(); r . b q k b n r p p . . p p p p n . . p . . . . . . . . . . . . . . . N P . . . . . . . . . . . P P P . . P P P R N B Q K B . R No worries! We've all been there. The undo() method comes to the rescue to fix mistakes like this one. $board = $board->undo(); $board->play('b', 'Nf6'); echo $board->getMovetext(); 1.e4 c5 2.Nf3 d6 3.d4 cxd4 4.Nxd4 Nf6 Now, what if you want to play a bunch of PGN moves at once instead of one by one as in the previous example? This is a common use case, and Chess\\Play\\SanPlay allows to easily do so. As it name implies, this class is intended to play a Standard Algebaric Notation (SAN) movetext. The validate() method will throw a Chess\\Exception\\PlayException if the movetext is not valid. use Chess\\Play\\SanPlay; $movetext = '1.e4 c5 2.Nf3 d6 3.d4 cxd4 4.Nxd4 Nf6'; $board = (new SanPlay($movetext)) ->validate() ->getBoard(); echo $board->toAsciiString(); r n b q k b . r p p . . p p p p . . . p . n . . . . . . . . . . . . . N P . . . . . . . . . . . P P P . . P P P R N B Q K B . R The game can be continued from this position \u2014 remember, almost everything in PHP Chess is done using a chessboard object. $board->play('w', 'Bb5+'); echo $board->toAsciiString(); r n b q k b . r p p . . p p p p . . . p . n . . . B . . . . . . . . . N P . . . . . . . . . . . P P P . . P P P R N B Q K . . R Every time a move is made, the state of the board changes and now the white king is in check. var_dump($board->isCheck()); bool(true) Of course the king is not mated in this position. var_dump($board->isMate()); bool(false) Also it is not stalemated. var_dump($board->isStalemate()); bool(false) And it is not a fivefold repetition yet. var_dump($board->isFivefoldRepetition()); bool(false) Otherwise the game would end. Numeric Annotation Glyphs (NAGs) can optionally be used in SAN movetexts, so this is how you'd typically validate a SAN movetext using NAGs for further processing. Remember, the validate() method will throw a Chess\\Exception\\PlayException if the movetext is not valid. use Chess\\Play\\SanPlay; $movetext = '1.e4 c5 2.Nf3 $1 d6 3.d4 cxd4 4.Nxd4 $48 Nf6 $113'; $sanPlay = (new SanPlay($movetext))->validate(); echo $sanPlay->getSanMovetext()->filtered(); 1.e4 c5 2.Nf3 $1 d6 3.d4 cxd4 4.Nxd4 $48 Nf6 $113 NAGs can be removed by passing the false value to the second argument of the filtered() method. echo $sanPlay->getSanMovetext()->filtered($comments = true, $nags = false); 1.e4 c5 2.Nf3 d6 3.d4 cxd4 4.Nxd4 Nf6 \ud83c\udf89 Next, let's learn how to process chess moves from a graphical user interface.","title":"Portable Game Notation (PGN)"},{"location":"read-moves/#long-algebraic-notation-lan","text":"\u2728 Computers and graphical user interfaces (GUI) often prefer an easy-to-use, machine-readable format called Long Algebraic Notation. Remember, if reading the main line of the Sicilian Defense from a JavaScript application, you may want to use the LAN format rather than the PGN format. Chances are that the JavaScript chessboard will be using the LAN format for move generation. use Chess\\Variant\\Classical\\Board; $board = new Board(); $board->playLan('w', 'e2e4'); $board->playLan('b', 'c7c5'); $board->playLan('w', 'g1f3'); $board->playLan('b', 'd7d6'); $board->playLan('w', 'd2d4'); $board->playLan('b', 'c5d4'); $board->playLan('w', 'f3d4'); $board->playLan('b', 'g8f6'); echo $board->getMovetext(); 1.e4 c5 2.Nf3 d6 3.d4 cxd4 4.Nxd4 Nf6 Also Chess\\Play\\LanPlay allows to easily play a bunch of LAN moves at once instead of one by one. As it name implies, this class is intended to play a LAN movetext. use Chess\\Play\\LanPlay; $movetext = '1.e2e4 c7c5 2.g1f3 d7d6 3.d2d4 c5d4 4.f3d4 g8f6'; $board = (new LanPlay($movetext)) ->validate() ->getBoard(); echo $board->toAsciiString(); r n b q k b . r p p . . p p p p . . . p . n . . . . . . . . . . . . . N P . . . . . . . . . . . P P P . . P P P R N B Q K B . R \ud83c\udf89 And, it's easy! The UCI protocol enables chess engines to communicate with user interfaces using LAN for moves.","title":"Long Algebraic Notation (LAN)"},{"location":"read-moves/#recursive-annotation-variation-rav","text":"\u2728 RAV stands for Recursive Annotation Variation. This format is especially useful to write and read tutorials about openings, notable games, chess studies and so on. RAV is an extension of the Standard Algebaric Notation (SAN) format and allows to annotate chess variations. After all, a RAV movetext is still a SAN movetext with support for comments. Comments are enclosed in curly brackets. Variations are enclosed in parentheses which can be nested recursively as many times as required with the trait that the previous move may need to be undone in order to play a certain variation. The example below describes how to play the Open Sicilian. 1.e4 c5 {enters the Sicilian Defense, the most popular and best-scoring response to White's first move.} (2.Nf3 {is played in about 80% of Master-level games after which there are three main options for Black.} (2... Nc6) (2... e6) (2... d6 {is Black's most common move.} 3.d4 {lines are collectively known as the Open Sicilian.} cxd4 4.Nxd4 Nf6 5.Nc3 {allows Black choose between four major variations: the Najdorf, Dragon, Classical and Scheveningen.} (5...a6 {is played in the Najdorf variation.}) (5...g6 {is played in the Dragon variation.}) (5...Nc6 {is played in the Classical variation.}) (5...e6 {is played in the Scheveningen variation.}))) Sicilian Defense. (2023, July 2). In Wikipedia. https://en.wikipedia.org/wiki/Sicilian_Defence Then all you need is a RAV reader. Figure 1. The response received from PHP Chess can be displayed as an HTML table. The RAV reader shown in Figure 1 displays the variation levels in different shades of gray. It is a 2D scrollable HTML table where the main line is shown in a white background color. The deeper the level, the darker the background color is displayed. Similarly as with Chess\\Play\\SanPlay and Chess\\Play\\LanPlay, Chess\\Play\\RavPlay allows to play a RAV movetext. The most important method in this class is the getFen() method. This method retrieves the FEN history of a RAV movetext to be displayed for reading purposes as shown in Figure 1. use Chess\\Play\\RavPlay; $movetext = \"1.e4 c5 (2.Nf3 (2... Nc6) (2... e6) (2... d6 3.d4 cxd4 4.Nxd4 Nf6 5.Nc3 (5...a6) (5...g6) (5...Nc6) (5...e6) ) )\"; $ravPlay = (new RavPlay($movetext))->validate(); $fen = $ravPlay->getFen(); print_r($fen); Array ( [0] => rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - [1] => rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 [2] => rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 [3] => rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - [4] => r1bqkbnr/pp1ppppp/2n5/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - [5] => rnbqkbnr/pp1p1ppp/4p3/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - [6] => rnbqkbnr/pp2pppp/3p4/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - [7] => rnbqkbnr/pp2pppp/3p4/2p5/3PP3/5N2/PPP2PPP/RNBQKB1R b KQkq d3 [8] => rnbqkbnr/pp2pppp/3p4/8/3pP3/5N2/PPP2PPP/RNBQKB1R w KQkq - [9] => rnbqkbnr/pp2pppp/3p4/8/3NP3/8/PPP2PPP/RNBQKB1R b KQkq - [10] => rnbqkb1r/pp2pppp/3p1n2/8/3NP3/8/PPP2PPP/RNBQKB1R w KQkq - [11] => rnbqkb1r/pp2pppp/3p1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R b KQkq - [12] => rnbqkb1r/1p2pppp/p2p1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - [13] => rnbqkb1r/pp2pp1p/3p1np1/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - [14] => r1bqkb1r/pp2pppp/2np1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - [15] => rnbqkb1r/pp3ppp/3ppn2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - ) Let's give this a try. Add some comments and get the FEN history. use Chess\\Play\\RavPlay; $movetext = \"1.e4 c5 {enters the Sicilian Defense.} (2.Nf3 (2... Nc6) (2... e6) (2... d6 3.d4 cxd4 4.Nxd4 Nf6 5.Nc3 (5...a6 {is played in the Najdorf variation.}) (5...g6 {is played in the Dragon variation.}) (5...Nc6 {is played in the Classical variation.}) (5...e6 {is played in the Scheveningen variation.}) ) )\"; $ravPlay = (new RavPlay($movetext))->validate(); $fen = $ravPlay->getFen(); print_r($fen); Cool! The result obtained is exactly the same as in the previous example. Array ( [0] => rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - [1] => rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 [2] => rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 [3] => rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - [4] => r1bqkbnr/pp1ppppp/2n5/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - [5] => rnbqkbnr/pp1p1ppp/4p3/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - [6] => rnbqkbnr/pp2pppp/3p4/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - [7] => rnbqkbnr/pp2pppp/3p4/2p5/3PP3/5N2/PPP2PPP/RNBQKB1R b KQkq d3 [8] => rnbqkbnr/pp2pppp/3p4/8/3pP3/5N2/PPP2PPP/RNBQKB1R w KQkq - [9] => rnbqkbnr/pp2pppp/3p4/8/3NP3/8/PPP2PPP/RNBQKB1R b KQkq - [10] => rnbqkb1r/pp2pppp/3p1n2/8/3NP3/8/PPP2PPP/RNBQKB1R w KQkq - [11] => rnbqkb1r/pp2pppp/3p1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R b KQkq - [12] => rnbqkb1r/1p2pppp/p2p1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - [13] => rnbqkb1r/pp2pp1p/3p1np1/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - [14] => r1bqkb1r/pp2pppp/2np1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - [15] => rnbqkb1r/pp3ppp/3ppn2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - ) In both cases the validate() method will throw a Chess\\Exception\\PlayException if the RAV movetext is not valid. This is how to obtain the validated movetext. $movetext = $ravPlay->getRavMovetext()->getMovetext(); You may want to remove tabs and spaces from a valid RAV movetext with the help of the filtered() method. $movetext = $ravPlay->getRavMovetext()->filtered(); echo $movetext; 1.e4 c5 {enters the Sicilian Defense, the most popular and best-scoring response to White's first move.} (2.Nf3 {is played in about 80% of Master-level games after which there are three main options for Black.} (2...Nc6) (2...e6) (2...d6 {is Black's most common move.} 3.d4 {lines are collectively known as the Open Sicilian.} cxd4 4.Nxd4 Nf6 5.Nc3 {allows Black choose between four major variations: the Najdorf, Dragon, Classical and Scheveningen.} (5...a6 {is played in the Najdorf variation.}) (5...g6 {is played in the Dragon variation.}) (5...Nc6 {is played in the Classical variation.}) (5...e6 {is played in the Scheveningen variation.}))) Comments are removed by passing the false value to the first argument of the filtered() method. $movetext = $ravPlay->getRavMovetext()->filtered($comments = false); echo $movetext; 1.e4 c5 (2.Nf3 (2...Nc6) (2...e6) (2...d6 3.d4 cxd4 4.Nxd4 Nf6 5.Nc3 (5...a6) (5...g6) (5...Nc6) (5...e6))) RAV files can also be loaded from a particular FEN position as opposed to the start position. use Chess\\FenToBoard; use Chess\\Play\\RavPlay; $movetext = \"1.Ra7 Kg8 2.Kg2 Kf8 3.Kf3 Ke8 4.Ke4 Kd8 5.Kd5 Kc8 (5...Ke8 6.Kd6 Kf8 7.Ke6 Kg8 8.Kf6 Kh8 9.Kg6 Kg8 10.Ra8#) 6.Kd6 Kb8 (6...Kd8 7.Ra8#) 7.Rc7 Ka8 8.Kc6 Kb8 9.Kb6 Ka8 10.Rc8#\"; $board = FenToBoard::create('7k/8/8/8/8/8/8/R6K w - -'); $ravPlay = (new RavPlay($movetext, $board))->validate(); $fen = $ravPlay->getFen(); print_r($fen); Array ( [0] => 7k/8/8/8/8/8/8/R6K w - - [1] => 7k/R7/8/8/8/8/8/7K b - - [2] => 6k1/R7/8/8/8/8/8/7K w - - [3] => 6k1/R7/8/8/8/8/6K1/8 b - - [4] => 5k2/R7/8/8/8/8/6K1/8 w - - [5] => 5k2/R7/8/8/8/5K2/8/8 b - - [6] => 4k3/R7/8/8/8/5K2/8/8 w - - [7] => 4k3/R7/8/8/4K3/8/8/8 b - - [8] => 3k4/R7/8/8/4K3/8/8/8 w - - [9] => 3k4/R7/8/3K4/8/8/8/8 b - - [10] => 2k5/R7/8/3K4/8/8/8/8 w - - [11] => 4k3/R7/8/3K4/8/8/8/8 w - - [12] => 4k3/R7/3K4/8/8/8/8/8 b - - [13] => 5k2/R7/3K4/8/8/8/8/8 w - - [14] => 5k2/R7/4K3/8/8/8/8/8 b - - [15] => 6k1/R7/4K3/8/8/8/8/8 w - - [16] => 6k1/R7/5K2/8/8/8/8/8 b - - [17] => 7k/R7/5K2/8/8/8/8/8 w - - [18] => 7k/R7/6K1/8/8/8/8/8 b - - [19] => 6k1/R7/6K1/8/8/8/8/8 w - - [20] => R5k1/8/6K1/8/8/8/8/8 b - - [21] => 2k5/R7/3K4/8/8/8/8/8 b - - [22] => 1k6/R7/3K4/8/8/8/8/8 w - - [23] => 3k4/R7/3K4/8/8/8/8/8 w - - [24] => R2k4/8/3K4/8/8/8/8/8 b - - [25] => 1k6/2R5/3K4/8/8/8/8/8 b - - [26] => k7/2R5/3K4/8/8/8/8/8 w - - [27] => k7/2R5/2K5/8/8/8/8/8 b - - [28] => 1k6/2R5/2K5/8/8/8/8/8 w - - [29] => 1k6/2R5/1K6/8/8/8/8/8 b - - [30] => k7/2R5/1K6/8/8/8/8/8 w - - [31] => k1R5/8/1K6/8/8/8/8/8 b - - ) \ud83c\udf89 So this is amazing! That's all we need to read and write chess tutorials, guides and how-tos.","title":"Recursive Annotation Variation (RAV)"}]}